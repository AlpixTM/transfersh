#!/usr/bin/env python
"""
 <transfersh - unofficial command line client for https://github.com/dutchcoders/transfer.sh>
    Copyright (C) 2017  Lukas N. <Alpix> contact[at]alpix.eu - https://github.com/AlpixTM/transfersh

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.
    If not, see <http://www.gnu.org/licenses/>.

"""
import argparse
import requests
import glob
import os
import tarfile

parser = argparse.ArgumentParser()
parser.add_argument("file", help="Path to the file or directory to upload")
parser.add_argument("-v", "--verbosity", help="Increase output verbosity", action="store_true")
parser.add_argument("-n", "--name", help="Change name of the file on Transfer.sh")
parser.add_argument("-r", "--recursive", help="Upload all files in a directory recursively", action="store_true")
parser.add_argument("-tg", "--targz", help="Upload as gzip compressed tar archive", action="store_true")
parser.add_argument("-t", "--tar", help="Upload as uncompressed tar archive", action="store_true")
parser.add_argument("-vt", "--virustotal", help="Check file with virustotal", action="store_true")
parser.add_argument("-sn", "--servername", help="Use your server.name instead of transfer.sh e.g. -sn up.de for https://up.de/")
# parser.add_argument("-t", "--tor", help="upload files via tor network",action="store_true")
args = parser.parse_args()

if args.verbosity:
    print (
    " ====== Transfersh ===== \nUnofficial command-line client for https://transfer.sh/ based on python "
    "\nby Alpix (https://alpix.eu)"
    "\ncontribute: https://github.com/AlpixTM/transfersh"
    )
    print ('Selected file to upload: ' + args.file)

# define upload url
if args.servername:
    upload_servername = args.servername
else:
    # default server transfer.sh
    upload_servername = "transfer.sh"


def upload(file, recursive=False):
    params = ""
    message = "File saved at: "
    """Upload procedure"""
    if args.virustotal:
        params = params + "/virustotal"
        message = "Virustotal Report is available here: "
    if args.name:
        filename = args.name
    else:
        filename = file.split("/")
        filename = str(filename[-1])
    with open(file, 'rb', buffering=0) as fh:
        response = requests.put('https://' + upload_servername + '/' + filename + params,
                                data=fh,
                                )
    if recursive:
        print('File ' + file + ' saved at: ' + response.text)
    else:
        print(message + response.text)
    return

"""
    if args.tor:
    Tor Support needs new concept -> Public tor socks proxy? Public tor http proxy without daily changing cookie!?

"""

if args.tar:
    tar = tarfile.open("/tmp/transfersh-upload.tar", "w")
    tarfilename = "/tmp/transfersh-upload.tar"

if args.targz:
    tar = tarfile.open("/tmp/transfersh-upload.tar.gz", "w:gz")
    tarfilename = "/tmp/transfersh-upload.tar.gz"

if args.recursive:
    isfile = os.path.isfile(args.file)
    if isfile:
        exit("Not a dir -> do not use -r // --recursive")
    for filename in glob.iglob(args.file + "**", recursive=True):
        check = os.path.isfile(filename)
        if check is not False:
            if args.tar is True or args.targz is True:
                tar.add(filename)
            else:
                upload(filename, True)
    if args.tar is True or args.targz is True:
        tar.close()
        upload(tarfilename, False)
        os.remove(tarfilename)
else:
    if args.tar is True or args.targz is True:
        tar.add(args.file)
        tar.close()
        upload(tarfilename, False)
        os.remove(tarfilename)
    else:
        upload(args.file, False)
